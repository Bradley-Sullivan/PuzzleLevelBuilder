TODO:
    Need to construct a basic level renderer
        + render other levels like they're stacked (style points)
        + custom shaders and palette switching??
    Need a dynamic texture loading process [DONE!]
        + able to search directories and enumerate textures??
        + calculates number of textures based on tex-sheet dimensions?
        + texture "type-ing" system
            - differentiates back/fore-ground, active/inactive, entity, etc. textures from files?
            - indexes and notes textures with animation frames??
    Need a robust editing loop
        + selection tools??
            - range select/editing
            - ctrl-click-esque editing
            - tile/entity types/id selections
            - shaped selections???
                + circle, triangle, rhombus, etc.??
        + level hot-swapping functionality
        + quick level creation and deletion
        + level resizing??
            - new level -> copy level functionality
        + level saves and exports?
            - saves to binary, exports to txt file??
            - saves and exports to txt file?
    Defined but flexible level file format(s)
        + need strict headers and "chunks" and/or delimiters
        + txt file
            - easy to "read" but difficult to parse?
            - convenient to store and maybe manually edit (user)
        + bin file
            - easier? to store and parse with defined format
            - difficult to manually edit and a bit less convenient (user)



Tile vs. Entity
    If something has any clear-cut, definite state it's
    an entity, else it do be a tile.

Ideal tile types:
    Full collision tile
    Player & Enemy Collision tile
    Enemy Collision tile
    Full collision moveable tile
    Status effect tiles
    Teleportation tiles
    Player spawn point
    Entity spawn point
    Level end point

Ideal entity types:
    Hostile enemies
        - long range hitscan
        - long range projectile
        - instagib melee
        - level end blocking enemies?
    Passive enemies
        - active obstacles
        - bandit/thief types
        - status effect granting types
    Triggers (recipient looks to trigger src.)
        - buttons, levers, pressure plates, etc.
        - trigger channels & channeling system
    Chests
        - one item per
        - if open -> no collision, else full collision
    "Ammo" pickups
        - states -> picked up v. not picked up
    Doors (Triggered and/or Interactable)
        - states -> open v. closed  >:}

Main Menu
    - New
    - Load
    - Help
    - Exit

Level Init Config Menu
    - Level Identifier
    - Rows
    - Columns
    - Initial floor textures
    - Confirm
Edit Menu (+ -> Shift Menu)
    - Add New Level
    - Delete Current Level
    - Edit/Resize Current Level
    - Switch Active Level
    - Save Level
    - Save Level & Exit
    + Import level???
    + Selection tools
        - range, manual, shape??, row, columns, all, etc.
    + Shader Palette Switch



Better Menuing System??
    - Goals
        + Ease of intitialization
        + Ease of drawing
        + Submenu functionality
    - Ideas
        + Separate out different menu "types"
            - "- %d +", drop-down, checkbox, slider + preview (colors)
            - Common attributes/functionality
                + Value held/selection state
                + Number of selections
                + Selection identifiers (strings/chars)
                + Cursor
        + Support different menu type interoperability
        + Separate MenuContext struct?
            - Holds pointers to other menu-types
                + Menu types can hold pointers to other menu contexts (sub-menus)
                + Need generalized menu display/processing functions
        + Use very basic, general menu structs with specialized processing functions
          within menu contexts.
            - Differentiate menu types with menu ID


Tool Menu Ideas 
    + Search by TileID
    + Search by Tile attr.
    + Batch Edit
    + Batch Reset
    + Resize Level
    + Create Level Preset
    + Duplicate Level
            

LEVEL FILE FORMAT 
    + Stage header
        = Syntax
            - :<Level ID>,<Num. Rows>,<Num. Cols>:<\n>
        = Info.
            - This provides an identifier for the level/stage as well as the necessary sizing params.
            - Preceded by a colon, terminated by a newline.
    + Tile Chunk 
        = Basic per-Tile Syntax
            - ;<Tile ID>,<Comma separated attr.>, ... , <TileID>,<Comma separated attr.><\n>
        = Info.
            - This contains all information about every tile in the stage. Preceded by a semicolon, terminated by a newline.
    + Entity Chunk
        = Basic per-Entity Syntax
            - ;<Entity ID>,<Comma separated attr.>, ... , <Entity ID>,<Comma separated attr.><\n>
        = Info.
            - Follows suit with tile chunk.
    + End-of-Stage Chunk
        = Basic Syntax
            - #<Level ID>#<\n>
        = Info.
            - Denotes the end of level information.

WORKSPACE FILE FORMAT
    + Workspace header
        = Syntax
            - +<Workspace ID>,<Num. Levels>,<Active Edit Level>,<Next New Level>+<\n>
        = Info.
            - Denotes the beginning of a workspace
    + Level/Stage Chunk
        = This chunk will store all level info. normally (see above)
    + Workspace footer
        = Syntax 
            - =<Workspace ID>=<\n>